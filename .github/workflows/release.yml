name: Release

on:
  push:
    tags:
      - 'v*'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=tag
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        generate_release_notes: true
        files: |
          README.md
          DOCKER.md
        body: |
          ## üöÄ MMM Application Release ${{ github.ref_name }}
          
          ### Docker Image
          ```bash
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
          ```
          
          ### Quick Start
          ```bash
          curl -L -o docker-compose.yml https://github.com/${{ github.repository }}/raw/${{ github.ref_name }}/docker-compose.yml
          curl -L -o .env.example https://github.com/${{ github.repository }}/raw/${{ github.ref_name }}/.env.example
          cp .env.example .env
          docker-compose up -d
          ```
          
          Access the application at http://localhost:8000
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy-production:
    runs-on: ubuntu-latest
    needs: build-and-release
    if: startsWith(github.ref, 'refs/tags/v') && !contains(github.ref, 'beta') && !contains(github.ref, 'alpha')
    environment: production
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2
    
    - name: Deploy to AWS ECS
      run: |
        echo "üöÄ Deploying MMM Application ${{ github.ref_name }} to production"
        
        # Pull the image from GitHub Container Registry to ECR
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
        docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }} 727529935876.dkr.ecr.us-east-2.amazonaws.com/mmm-application:${{ github.ref_name }}
        
        # Login to ECR and push
        aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin 727529935876.dkr.ecr.us-east-2.amazonaws.com
        docker push 727529935876.dkr.ecr.us-east-2.amazonaws.com/mmm-application:${{ github.ref_name }}
        
        # Update ECS service with new image
        aws ecs update-service --cluster mmm-cluster-production --service mmm-temp-production --force-new-deployment
        
        # Wait for deployment to stabilize
        echo "‚è≥ Waiting for deployment to complete..."
        aws ecs wait services-stable --cluster mmm-cluster-production --services mmm-temp-production
        
        echo "‚úÖ Deployment complete!"