name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "18"

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install -e .
    
    - name: Set up environment variables
      run: |
        cp .env.example .env
        echo "REDIS_URL=redis://localhost:6379" >> .env
        echo "DATABASE_URL=sqlite:///./test_mmm.db" >> .env
        echo "MMM_ENV=testing" >> .env
    
    - name: Run database migrations
      run: |
        alembic upgrade head
    
    - name: Run tests with coverage
      run: |
        pytest tests/ -v --cov=src/mmm --cov-report=xml --cov-report=term-missing
      env:
        PYTHONPATH: ${{ github.workspace }}/src
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  quality:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
    
    - name: Run black (code formatting)
      run: |
        black --check --diff src/ tests/
    
    - name: Run flake8 (linting)
      run: |
        flake8 src/ tests/ --max-line-length=100 --ignore=E203,W503
    
    - name: Run mypy (type checking)
      run: |
        mypy src/mmm --ignore-missing-imports --no-strict-optional
    
    - name: Run bandit (security scanning)
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        bandit -r src/ --severity-level medium
    
    - name: Check dependency security
      run: |
        safety check --json --output safety-report.json || true
        safety check

  build:
    runs-on: ubuntu-latest
    needs: [test, quality]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -t mmm-application:${{ github.sha }} .
    
    - name: Test Docker image
      run: |
        docker run --rm --name test-mmm -d -p 8001:8000 mmm-application:${{ github.sha }}
        sleep 10
        curl -f http://localhost:8001/ || exit 1
        docker stop test-mmm

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test, quality, build]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "ðŸš€ Deploying to staging environment"
        echo "This would deploy to your staging environment"
        # Add your staging deployment commands here
        # Example: kubectl apply -f k8s/staging/
        # Example: helm upgrade --install mmm-staging ./helm-chart

  deploy-production:
    runs-on: ubuntu-latest
    needs: [test, quality, build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "ðŸš€ Deploying to production environment"
        echo "This would deploy to your production environment"
        # Add your production deployment commands here
        # Example: kubectl apply -f k8s/production/
        # Example: helm upgrade --install mmm-prod ./helm-chart