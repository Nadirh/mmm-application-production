apiVersion: apps/v1
kind: Deployment
metadata:
  name: mmm-app-production
  namespace: mmm-production
  labels:
    app: mmm-application
    environment: production
spec:
  replicas: 3
  selector:
    matchLabels:
      app: mmm-application
      environment: production
  template:
    metadata:
      labels:
        app: mmm-application
        environment: production
    spec:
      containers:
      - name: mmm-app
        image: ghcr.io/your-org/mmm-application:latest
        ports:
        - containerPort: 8000
        env:
        - name: MMM_ENV
          value: "production"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: mmm-secrets-production
              key: database-url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: mmm-secrets-production
              key: redis-url
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: mmm-secrets-production
              key: secret-key
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
        volumeMounts:
        - name: uploads
          mountPath: /app/static/uploads
      volumes:
      - name: uploads
        persistentVolumeClaim:
          claimName: mmm-uploads-production
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
      - key: "kubernetes.io/os"
        operator: "Equal"
        value: "linux"
        effect: "NoSchedule"
---
apiVersion: v1
kind: Service
metadata:
  name: mmm-service-production
  namespace: mmm-production
spec:
  selector:
    app: mmm-application
    environment: production
  ports:
  - protocol: TCP
    port: 80
    targetPort: 8000
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: mmm-ingress-production
  namespace: mmm-production
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/proxy-body-size: "100m"
    nginx.ingress.kubernetes.io/rate-limit: "100"
spec:
  tls:
  - hosts:
    - mmm.yourdomain.com
    secretName: mmm-tls-production
  rules:
  - host: mmm.yourdomain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: mmm-service-production
            port:
              number: 80